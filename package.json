{
  "name": "swe",
  "description": "Sweet: Simplest Web Engine Ever, The",
  "author": {
    "name": "Artem Sapegin",
    "email": "artem@sapegin.me",
    "url": "http://sapegin.me"
  },
  "version": "2.0.2",
  "repository": {
    "type": "git",
    "url": "git@github.com:sapegin/sweet.git"
  },
  "main": "./lib/index.js",
  "engines": {
    "node": "0.8.x"
  },
  "dependencies": {
    "fest": "*",
    "richtypo": "*",
    "marked": "0.2.x"
  },
  "devDependencies": {},
  "readme": "# Sweet: Simplest Web Engine Ever, The\n\nSweet is a very simple static websites generator powered by Node.js. Contains template engine, JavaScript concatenator/minificator and Stylus support. (You can use only parts you need.)\n\n\n## Features\n\n  - HTML, Markdown or JSON content\n  - [Fest templates](https://github.com/mailru/fest)\n  - JavaScript concatenation and minification (uses [UglifyJS](https://github.com/mishoo/UglifyJS))\n  - [Stylus](https://github.com/LearnBoost/stylus) support (plain CSS not supported yet)\n  - Embedded web server\n  - Multilingual content\n  - Typography helper (uses [Richtypo.js](https://github.com/sapegin/richtypo.js))\n  - Automatic rebuilding when content, templates or styles are changed\n  - Versioned files (adds timestamp to file url to flush browser cache)\n\n\n## Installation\n\n```bash\n$ npm install swe -g\n```\n\n\n## Example\n\nGo to `example` folder, type `swe -p` and point your browser to http://127.0.0.1:8000/. Now you can edit any file and press F5 to see changes you made.\n\n\n## Command line switches\n\n```bash\n$ swe\n```\n\nBuilds website.\n\n`-d` or `--debug`\n\nDebug mode. You can test for `$.debug` in your templates.\n\n`-i` or `--init`\n\nCreates config file in current directory.\n\n`-w` or `--watch`\n\nWatch mode. Will rebuild website on any change in content, templates or styles.\n\n`-s` or `--serve`\n\nBuilds and serves your website to localhost.\n\n`-p` or `--preview`\n\n`--serve` + `--watch` + `--debug`—the most convenient mode for development.\n\n\n## Configuration\n\nPlace `sweet.json` to your project’s root directory.\n\nThe only required option is `publish_dir`—it is where your generated files will be placed. So minimal config is:\n\n```json\n{\n\t\"publish_dir\": \"htdocs\"\n}\n```\n\nBut it is of course useless :) You should add any of the following groups of options.\n\n### Templates\n\nAvailable options are:\n\n```json\n\"content_dir\": \"content\",\n\"templates_dir\": \"templates\",\n\"default_template_id\": \"page\",\n\"url_prefixes\": \"/\",\n\"uri_prefixes\": \"/\"\n```\n\n`content_dir`, `templates_dir` and `default_template_id` are required.\n\nSee *Working with templates* section below.\n\nIf your site is multilingual add this options:\n\n```json\n\"langs\": [\"ru\", \"en\"],\n\"url_prefixes\": {\n\t\"ru\": \"http://sapegin.ru/\",\n\t\"en\": \"http://sapegin.me/\"\n},\n\"uri_prefixes\": {\n\t\"ru\": \"/\",\n\t\"en\": \"/\"\n}\n```\n\nOtherwise you can set single language for content (`'en'` by default):\n\n```json\n\"lang\": \"en\"\n```\n\n### JavaScript Files\n\nTo concatenate and minify some JavaScript:\n\n```json\n\"javascripts\": {\n\t\"main\": {\n\t\t\"in\": [\n\t\t\t\"js/test1.js\",\n\t\t\t\"js/test2.js\",\n\t\t\t\"js/test3.js\"\n\t\t],\n\t\t\"out\": \"js/test.min.js\"\n\t}\n}\n```\n\n### Versioned files\n\n```json\n\"files\": {\n\t\"css\": {\n\t\t\"path\": \"htdocs/styles/s.css\",\n\t\t\"href\": \"../styles/s.css?{version}\"\n\t}\n}\n```\n\n### Stylus\n\n```json\n\"stylesheets\": {\n\t\"main\": {\n\t\t\"in\": \"styles/index.styl\",\n\t\t\"out\": \"htdocs/styles/s.css\"\n\t}\n}\n```\n\n*Note:* All Stylus stylesheets should be in the same directory.\n\n### Typographer\n\nBy default Sweet will apply [Richtypo.js](https://github.com/sapegin/richtypo.js) for `$.title` and `$.content`. To disable typographer add:\n\n```json\n\"typographer\": false\n```\n\n\n## Using templates\n\nSweet uses Fest templating engine (born at Mail.ru). See [docs](https://github.com/mailru/fest) (in Russian) in official repo or examples here.\n\n### Content files\n\nContent can be in HTML, Markdown of JSON. *HTML* files look like this:\n\n```html\ntitle: Page title\ntemplate: index\nvar1: any value\nvar2: another value\n\n---\n\n<p>Any HTML here.</p>\n```\n\nOnly `title` is required. After `\\n---\\n` you can place any HTML and then use it in your templates as `$.content`. Add `template` to specify template (or `default_template_id` will be used).\n\nAdditionally you can add any options you want. For example, `var1` will be `$.var1` in your templates.\n\n*Markdown* files are the same as HTML but file extension should be `.md` or `.markdown`. In content part you can use [GitHub flavored Markdown](http://github.github.com/github-flavored-markdown/) as well as any HTML.\n\n*JSON* content is almost the same:\n\n```json\n{\n\t\"title\": \"Page title\",\n\t\"template\": \"index\",\n\t\"var1\": \"any value\",\n\t\"var2\": [\"You\", \"can\", \"use\", \"all\", \"JSON\", \"power.\"]\n}\n```\n\n### Template context\n\nIn addition to your own variables (see above) Sweet provides some useful template variables.\n\n`$.title`\n\nPage title.\n\n`$.pageTitle`\n\nUntypographed page title. When typographer is disabled (`\"typographer\": false` in config), `$.pageTitle` is equal to `$.title`.\n\n`$.content`\n\nPage content.\n\n`$.debug`\n\nTrue if debug mode is enabled (see `--debug` command line switch above).\n\n`$.content`\n\nContent of a page. See section *Content files* above.\n\n`$.lang`\n\nLanguage code (from `langs` config option).\n\n`$.path`\n\nPath of content file inside `content_dir` and without extension.\n\n`$.uri` and `$.url`\n\nURL and URI of a page: `uri_prefixes`/`url_prefixes` + `$.lang` + `$.path`.\n\n`$.map`\n\nSitemap. Contexts of all pages (without `content`):\n\n```json\n{\n\t\"index\": {\n\t\t\"title\": \"Home page\",\n\t\t\"path\": \"index\",\n\t\t\"uri\": \"/\",\n\t\t...\n\t},\n\t\"about\": {\n\t\t\"title\": \"About Us\",\n\t\t\"path\": \"about\",\n\t\t\"uri\": \"/about\",\n\t\t...\n\t},\n\t...\n}\n```\n\n`$.files`\n\nVersioned files hash:\n\n```json\n{\n\t\"css\": \"../styles/s.css?1329399548706\"\n}\n```\n\n`$.javascripts` (available only in debug mode)\n\nJavaScript source files list.\n\n### Template functions\n\nYou can use typographer and Markdown parser in your templates:\n\n- `$.t()` — enhancing typography: non-breaking spaces, abbreviations.\n- `$.tt()` — typography for big text: the same as rich + ampersands and hanging punctuation.\n- `$.tl()` — simple typographer (quotes, em-dash, etc.) for user generated content (e.g. comments).\n- `$.md()` — Markdown.\n- `$.mds()` — Markdown (not wrapped in `<p>` tag).\n\nIn example: markdowned and typogrphed text from `myText` context variable.\n\n```xml\n<f:value>$.t($.md($.myText))</f:value>\n```\n\n### Common data\n\nAny “hidden” JSON file (name begins with “.”) in `content_dir` interprets as file with common data.\n\nFor example `.common.json` with this contents:\n\n```json\n{\n\t\"sitename\": \"Sweet Demo Site\",\n\t\"menu\": [\n\t\t{\n\t\t\t\"title\": \"Home\",\n\t\t\t\"href\": \"/\"\n\t\t},\n\t\t{\n\t\t\t\"title\": \"About\",\n\t\t\t\"href\": \"/about\"\n\t\t}\n\t]\n}\n```\n\nwill be accessible via `$.common` context variable.\n\n\n---\n\n## License\n\n(The MIT License)\n\nCopyright © 2012 Artem Sapegin, artem@sapegin.ru, http://sapegin.me\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "swe@0.5.6",
  "_from": "swe@*"
}
